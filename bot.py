
import asyncio
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command

from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.pagesizes import A4
from PyPDF2 import PdfReader, PdfWriter

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç
pdfmetrics.registerFont(TTFont("DejaVu", "DejaVuSans.ttf"))

bot = Bot("7526552209:AAGxuLptYIUeqIGzFsrmmcdXB38JiLFyJto", default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    language = State()
    full_name = State()
    passport = State()
    region = State()
    phone = State()
    app_id = State()

TEXTS = {
    "lang_prompt": {
        "ru": "üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:",
        "uz": "üá∫üáø Iltimos, tilni tanlang / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    },
    "full_name": {
        "ru": "üìå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é",
        "uz": "üìå To'liq ism-sharifingizni kiriting"
    },
    "passport": {
        "ru": "üìé –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞",
        "uz": "üìé Pasport seriyasi va raqamini kiriting"
    },
    "region": {
        "ru": "üèò –£–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å/–≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.",
        "uz": "üèò Yashash hududingizni ko'rsating (viloyat/shahar)"
    },
    "phone": {
        "ru": "üìû –í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +998 XX XXX XX XX)",
        "uz": "üìû Telefon raqamingizni kiriting (+998 XX XXX XX XX)"
    },
    "app_id": {
        "ru": "üìÑ –í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏",
        "uz": "üìÑ Arizangizning ID raqamini kiriting"
    },
    "thanks": {
        "ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.\n–ò–¥—ë—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–ñ–∏–ª—å—ë 2025¬ª.",
        "uz": "‚úÖ Rahmat! Barcha ma'lumotlar olindi.\n¬´Uy-joy 2025¬ª dasturi ishtirokchisi sertifikati shakllantirilmoqda."
    },
    "doc_generating": {
        "ru": "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        "uz": "‚è≥ Iltimos, bir necha soniya kuting..."
    },
    "pdf_ready": {
        "ru": "üìÅ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ My.Gov.Uz.",
        "uz": "üìÅ Sertifikatingiz tayyorlandi va My.Gov.Uz tizimida ro'yxatdan o'tkazildi."
    }
}

@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    kb = [[types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), types.KeyboardButton(text="üá∫üáø O'zbek")]]
    await message.answer(TEXTS["lang_prompt"]["ru"], reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
    await state.set_state(Form.language)

@dp.message(Form.language)
async def language_chosen(message: types.Message, state: FSMContext):
    lang = "ru" if "–†—É—Å" in message.text else "uz"
    await state.update_data(lang=lang)
    await message.answer(TEXTS["full_name"][lang], reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.full_name)

@dp.message(Form.full_name)
async def full_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    lang = (await state.get_data())["lang"]
    await message.answer(TEXTS["passport"][lang])
    await state.set_state(Form.passport)

@dp.message(Form.passport)
async def passport_handler(message: types.Message, state: FSMContext):
    await state.update_data(passport=message.text)
    lang = (await state.get_data())["lang"]
    await message.answer(TEXTS["region"][lang])
    await state.set_state(Form.region)

@dp.message(Form.region)
async def region_handler(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text)
    lang = (await state.get_data())["lang"]
    await message.answer(TEXTS["phone"][lang])
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def phone_handler(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    lang = (await state.get_data())["lang"]
    await message.answer(TEXTS["app_id"][lang])
    await state.set_state(Form.app_id)

@dp.message(Form.app_id)
async def app_id_handler(message: types.Message, state: FSMContext):
    await state.update_data(app_id=message.text)
    data = await state.get_data()
    lang = data["lang"]

    intro_msg = await message.answer(TEXTS["thanks"][lang])
    await asyncio.sleep(1)
    progress_msg = await message.answer("üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")

    for percent in range(1, 101):
        await asyncio.sleep(0.05)
        bar_length = 10
        filled_length = int(bar_length * percent / 100)
        bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
        await progress_msg.edit_text(f"üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ [{bar}] {percent}%")

    await progress_msg.edit_text("üìÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

    filled_pdf = create_filled_pdf(data)
    await intro_msg.delete()
    await progress_msg.delete()

    await message.answer_document(
        FSInputFile(filled_pdf),
        caption=TEXTS["pdf_ready"][lang]
    )

    os.remove(filled_pdf)
    await state.clear()

def create_filled_pdf(data):
    c = canvas.Canvas("overlay.pdf", pagesize=A4)
    c.setFont("DejaVu", 12)

    c.drawString(222, 562, data["full_name"])
    c.drawString(255, 541, data["passport"])
    c.drawString(245, 520, data["region"])
    c.drawString(250, 500, data["phone"])
    c.drawString(340, 481, data["app_id"])
    c.drawString(385, 180, "–®–µ—Ä–∑–æ–¥ –°–∞–∏–¥–∂–∞–Ω–æ–≤–∏—á –•–∏–¥–æ—è—Ç–æ–≤")
    today = datetime.now().strftime("%d      %B ")
    c.drawString(222, 159, today)

    c.save()

    reader = PdfReader("/Users/maratkhanulyyestai/Downloads/sertifikat_final_adjusted_clear.pdf")
    overlay = PdfReader("overlay.pdf")
    writer = PdfWriter()

    page = reader.pages[0]
    page.merge_page(overlay.pages[0])
    writer.add_page(page)

    output = f"certificate_2025_{data['app_id']}.pdf"
    with open(output, "wb") as f:
        writer.write(f)

    os.remove("overlay.pdf")
    return output

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
